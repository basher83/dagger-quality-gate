version: '3'

vars:
  PYTHON: uv run python
  EXAMPLE_DIR: examples/sample-repo

tasks:
  default:
    desc: List available tasks
    cmds:
      - task --list

  install:
    desc: Install dependencies with uv
    cmds:
      - uv sync

  run:
    desc: Run quality gate pipeline on current directory
    cmds:
      - '{{.PYTHON}} main.py {{.CLI_ARGS}}'

  test:
    desc: Run pipeline on example repository (should show failures)
    cmds:
      - '{{.PYTHON}} main.py {{.EXAMPLE_DIR}}'

  test:verbose:
    desc: Run pipeline on example repository with verbose output
    cmds:
      - VERBOSE=true {{.PYTHON}} main.py {{.EXAMPLE_DIR}}

  # Individual check tasks
  test:black:
    desc: Test only Black formatter
    env:
      ENABLE_BLACK: 'true'
      ENABLE_RUFF: 'false'
      ENABLE_MYPY: 'false'
      ENABLE_TY: 'false'
      ENABLE_BANDIT: 'false'
      ENABLE_SEMGREP: 'false'
      ENABLE_SAFETY: 'false'
      ENABLE_MARKDOWN: 'false'
      ENABLE_TERRAFORM: 'false'
      ENABLE_TFLINT: 'false'
      ENABLE_GITLEAKS: 'false'
    cmds:
      - '{{.PYTHON}} main.py {{.EXAMPLE_DIR}}'

  test:ruff:
    desc: Test only Ruff linter
    env:
      ENABLE_BLACK: 'false'
      ENABLE_RUFF: 'true'
      ENABLE_MYPY: 'false'
      ENABLE_TY: 'false'
      ENABLE_BANDIT: 'false'
      ENABLE_SEMGREP: 'false'
      ENABLE_SAFETY: 'false'
      ENABLE_MARKDOWN: 'false'
      ENABLE_TERRAFORM: 'false'
      ENABLE_TFLINT: 'false'
      ENABLE_GITLEAKS: 'false'
    cmds:
      - '{{.PYTHON}} main.py {{.EXAMPLE_DIR}}'

  test:mypy:
    desc: Test only MyPy type checker
    env:
      ENABLE_BLACK: 'false'
      ENABLE_RUFF: 'false'
      ENABLE_MYPY: 'true'
      ENABLE_TY: 'false'
      ENABLE_BANDIT: 'false'
      ENABLE_SEMGREP: 'false'
      ENABLE_SAFETY: 'false'
      ENABLE_MARKDOWN: 'false'
      ENABLE_TERRAFORM: 'false'
      ENABLE_TFLINT: 'false'
      ENABLE_GITLEAKS: 'false'
    cmds:
      - '{{.PYTHON}} main.py {{.EXAMPLE_DIR}}'

  test:markdown:
    desc: Test only Markdown linting
    env:
      ENABLE_BLACK: 'false'
      ENABLE_RUFF: 'false'
      ENABLE_MYPY: 'false'
      ENABLE_TY: 'false'
      ENABLE_BANDIT: 'false'
      ENABLE_SEMGREP: 'false'
      ENABLE_SAFETY: 'false'
      ENABLE_MARKDOWN: 'true'
      ENABLE_TERRAFORM: 'false'
      ENABLE_TFLINT: 'false'
      ENABLE_GITLEAKS: 'false'
    cmds:
      - '{{.PYTHON}} main.py {{.EXAMPLE_DIR}}'

  test:secrets:
    desc: Test only Gitleaks secrets scanning
    env:
      ENABLE_BLACK: 'false'
      ENABLE_RUFF: 'false'
      ENABLE_MYPY: 'false'
      ENABLE_TY: 'false'
      ENABLE_BANDIT: 'false'
      ENABLE_SEMGREP: 'false'
      ENABLE_SAFETY: 'false'
      ENABLE_MARKDOWN: 'false'
      ENABLE_TERRAFORM: 'false'
      ENABLE_TFLINT: 'false'
      ENABLE_GITLEAKS: 'true'
    cmds:
      - '{{.PYTHON}} main.py {{.EXAMPLE_DIR}}'

  test:bandit:
    desc: Test only Bandit security scanner
    env:
      ENABLE_BLACK: 'false'
      ENABLE_RUFF: 'false'
      ENABLE_MYPY: 'false'
      ENABLE_TY: 'false'
      ENABLE_BANDIT: 'true'
      ENABLE_SEMGREP: 'false'
      ENABLE_SAFETY: 'false'
      ENABLE_MARKDOWN: 'false'
      ENABLE_TERRAFORM: 'false'
      ENABLE_TFLINT: 'false'
      ENABLE_GITLEAKS: 'false'
    cmds:
      - '{{.PYTHON}} main.py {{.EXAMPLE_DIR}}'

  # Combination tasks
  test:python:
    desc: Test all Python checks (Black, Ruff, MyPy, Ty)
    env:
      ENABLE_BLACK: 'true'
      ENABLE_RUFF: 'true'
      ENABLE_MYPY: 'true'
      ENABLE_TY: 'true'
      ENABLE_BANDIT: 'false'
      ENABLE_SEMGREP: 'false'
      ENABLE_SAFETY: 'false'
      ENABLE_MARKDOWN: 'false'
      ENABLE_TERRAFORM: 'false'
      ENABLE_TFLINT: 'false'
      ENABLE_GITLEAKS: 'false'
    cmds:
      - '{{.PYTHON}} main.py {{.EXAMPLE_DIR}}'

  test:security:
    desc: Test all security checks (Bandit, Semgrep, Safety, Gitleaks)
    env:
      ENABLE_BLACK: 'false'
      ENABLE_RUFF: 'false'
      ENABLE_MYPY: 'false'
      ENABLE_TY: 'false'
      ENABLE_BANDIT: 'true'
      ENABLE_SEMGREP: 'true'
      ENABLE_SAFETY: 'true'
      ENABLE_MARKDOWN: 'false'
      ENABLE_TERRAFORM: 'false'
      ENABLE_TFLINT: 'false'
      ENABLE_GITLEAKS: 'true'
    cmds:
      - '{{.PYTHON}} main.py {{.EXAMPLE_DIR}}'

  test:terraform:
    desc: Test Terraform checks (fmt and tflint)
    env:
      ENABLE_BLACK: 'false'
      ENABLE_RUFF: 'false'
      ENABLE_MYPY: 'false'
      ENABLE_TY: 'false'
      ENABLE_BANDIT: 'false'
      ENABLE_SEMGREP: 'false'
      ENABLE_SAFETY: 'false'
      ENABLE_MARKDOWN: 'false'
      ENABLE_TERRAFORM: 'true'
      ENABLE_TFLINT: 'true'
      ENABLE_GITLEAKS: 'false'
    cmds:
      - '{{.PYTHON}} main.py {{.EXAMPLE_DIR}}'

  test:fast:
    desc: Test fast checks only (exclude slow security scanners)
    env:
      ENABLE_BLACK: 'true'
      ENABLE_RUFF: 'true'
      ENABLE_MYPY: 'true'
      ENABLE_TY: 'false'
      ENABLE_BANDIT: 'false'
      ENABLE_SEMGREP: 'false'
      ENABLE_SAFETY: 'false'
      ENABLE_MARKDOWN: 'true'
      ENABLE_TERRAFORM: 'true'
      ENABLE_TFLINT: 'false'
      ENABLE_GITLEAKS: 'false'
    cmds:
      - '{{.PYTHON}} main.py {{.EXAMPLE_DIR}}'

  lint:
    desc: Run linters on this project
    cmds:
      - '{{.PYTHON}} -m ruff check .'
      - '{{.PYTHON}} -m mypy . --ignore-missing-imports'

  lint:fix:
    desc: Run linters with auto-fix
    cmds:
      - '{{.PYTHON}} -m ruff check . --fix'

  format:
    desc: Format code with ruff
    cmds:
      - '{{.PYTHON}} -m ruff format .'

  clean:
    desc: Clean up generated files
    cmds:
      - rm -rf .ruff_cache/
      - rm -rf .mypy_cache/
      - rm -rf __pycache__/
      - rm -rf .pytest_cache/
      - find . -type d -name "__pycache__" -exec rm -rf {} +
      - find . -type f -name "*.pyc" -delete

  # Run checks on current project
  check:
    desc: Run all checks on current project
    cmds:
      - '{{.PYTHON}} main.py .'

  check:python:
    desc: Run Python checks on current project
    env:
      ENABLE_BLACK: 'true'
      ENABLE_RUFF: 'true'
      ENABLE_MYPY: 'true'
      ENABLE_TY: 'true'
      ENABLE_BANDIT: 'false'
      ENABLE_SEMGREP: 'false'
      ENABLE_SAFETY: 'false'
      ENABLE_MARKDOWN: 'false'
      ENABLE_TERRAFORM: 'false'
      ENABLE_TFLINT: 'false'
      ENABLE_GITLEAKS: 'false'
    cmds:
      - '{{.PYTHON}} main.py .'

  check:security:
    desc: Run security checks on current project
    env:
      ENABLE_BLACK: 'false'
      ENABLE_RUFF: 'false'
      ENABLE_MYPY: 'false'
      ENABLE_TY: 'false'
      ENABLE_BANDIT: 'true'
      ENABLE_SEMGREP: 'true'
      ENABLE_SAFETY: 'true'
      ENABLE_MARKDOWN: 'false'
      ENABLE_TERRAFORM: 'false'
      ENABLE_TFLINT: 'false'
      ENABLE_GITLEAKS: 'true'
    cmds:
      - '{{.PYTHON}} main.py .'

  check:fast:
    desc: Run fast checks on current project
    env:
      ENABLE_BLACK: 'true'
      ENABLE_RUFF: 'true'
      ENABLE_MYPY: 'true'
      ENABLE_TY: 'false'
      ENABLE_BANDIT: 'false'
      ENABLE_SEMGREP: 'false'
      ENABLE_SAFETY: 'false'
      ENABLE_MARKDOWN: 'true'
      ENABLE_TERRAFORM: 'false'
      ENABLE_TFLINT: 'false'
      ENABLE_GITLEAKS: 'false'
      PARALLEL: 'false'
    cmds:
      - '{{.PYTHON}} main.py .'

  dev:
    desc: Run pipeline on current directory with all checks
    cmds:
      - '{{.PYTHON}} main.py .'

  dev:watch:
    desc: Watch for changes and run pipeline
    cmds:
      - echo "Watching for changes... Press Ctrl+C to stop"
      - watch -n 5 {{.PYTHON}} main.py {{.CLI_ARGS}}

  ci:
    desc: Simulate CI run
    cmds:
      - task: install
      - task: lint
      - task: test