name: Quality Gate CI

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  quality-gate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
    
    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@bd01e18f51369d5a26f1651c3cb451d3417e3bba # v6
    
    - name: Install dependencies
      run: uv sync
    
    - name: Run Quality Gate Pipeline
      run: |
        uv run python main.py
      env:
        # Enable specific checks (all enabled by default)
        ENABLE_MARKDOWN: 'true'
        ENABLE_RUFF: 'true'
        ENABLE_BLACK: 'true'
        ENABLE_MYPY: 'true'
        ENABLE_TY: 'true'
        ENABLE_BANDIT: 'true'
        ENABLE_SAFETY: 'true'
        ENABLE_TERRAFORM: 'true'
        ENABLE_GITLEAKS: 'true'
        # Optional: Run checks sequentially
        # PARALLEL: 'false'
        # Optional: Continue on failure
        # FAIL_FAST: 'false'

  # Example of running only specific checks
  python-checks-only:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
    
    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@bd01e18f51369d5a26f1651c3cb451d3417e3bba # v6
    
    - name: Install dependencies
      run: uv sync
    
    - name: Run Python Checks Only
      run: |
        uv run python main.py
      env:
        # Disable all checks except Python
        ENABLE_MARKDOWN: 'false'
        ENABLE_RUFF: 'true'
        ENABLE_BLACK: 'true'
        ENABLE_MYPY: 'true'
        ENABLE_TY: 'true'
        ENABLE_BANDIT: 'true'
        ENABLE_SAFETY: 'true'
        ENABLE_TERRAFORM: 'false'
        ENABLE_GITLEAKS: 'false'

  # Example of container vulnerability scanning
  container-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
    
    - name: Extract container images from config
      id: extract-images
      run: |
        # Extract unique container images from Python files
        grep -h "container_image=" checks/*.py config.py | \
          sed -n 's/.*container_image="\([^"]*\)".*/\1/p' | \
          sort -u > images.txt
        echo "Found container images:"
        cat images.txt
    
    - name: Scan container images with Trivy
      run: |
        # Install Trivy (using modern GPG key handling)
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
        echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Check if any images were found
        if [ ! -s images.txt ]; then
          echo "No container images found to scan"
          exit 0
        fi
        
        # Scan each image
        exit_code=0
        while IFS= read -r image; do
          echo "Scanning $image..."
          if ! trivy image --severity HIGH,CRITICAL "$image"; then
            exit_code=1
          fi
        done < images.txt
        
        exit $exit_code
